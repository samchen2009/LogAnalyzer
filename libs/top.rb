# Autogenerated from a Treetop grammar. Edits may be lost.


module Top
  include Treetop::Runtime

  def root
    @root ||= :line
  end

  module Line0
    def number
      elements[0]
    end

  end

  module Line1
    def number
      elements[0]
    end

  end

  module Line2
    def number
      elements[0]
    end

  end

  module Line3
  end

  module Line4
    def pid
      elements[0]
    end

    def space1
      elements[1]
    end

    def tid
      elements[2]
    end

    def space2
      elements[3]
    end

    def pr
      elements[4]
    end

    def space3
      elements[5]
    end

    def cpu
      elements[6]
    end

    def space4
      elements[7]
    end

    def s
      elements[8]
    end

    def space5
      elements[9]
    end

    def vss
      elements[10]
    end

    def space6
      elements[11]
    end

    def rss
      elements[12]
    end

    def space7
      elements[13]
    end

    def pcy
      elements[14]
    end

    def space8
      elements[15]
    end

    def uid
      elements[16]
    end

    def space9
      elements[17]
    end

    def thread
      elements[18]
    end

    def space10
      elements[19]
    end

    def proc
      elements[20]
    end
  end

  def _nt_line
    start_index = index
    if node_cache[:line].has_key?(index)
      cached = node_cache[:line][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1, s1 = index, []
      r2 = _nt_number
      s1 << r2
      if r2
        r3 = _nt_space
        s1 << r3
        if r3
          r4 = _nt_number
          s1 << r4
          if r4
            r5 = _nt_space
            s1 << r5
            if r5
              r6 = _nt_number
              s1 << r6
              if r6
                r7 = _nt_space
                s1 << r7
                if r7
                  i8, s8 = index, []
                  r9 = _nt_number
                  s8 << r9
                  if r9
                    if has_terminal?("%", false, index)
                      r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure("%")
                      r10 = nil
                    end
                    s8 << r10
                  end
                  if s8.last
                    r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
                    r8.extend(Line0)
                  else
                    @index = i8
                    r8 = nil
                  end
                  s1 << r8
                  if r8
                    r11 = _nt_space
                    s1 << r11
                    if r11
                      i12 = index
                      if has_terminal?("R", false, index)
                        r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure("R")
                        r13 = nil
                      end
                      if r13
                        r12 = r13
                      else
                        if has_terminal?("D", false, index)
                          r14 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure("D")
                          r14 = nil
                        end
                        if r14
                          r12 = r14
                        else
                          if has_terminal?("S", false, index)
                            r15 = instantiate_node(SyntaxNode,input, index...(index + 1))
                            @index += 1
                          else
                            terminal_parse_failure("S")
                            r15 = nil
                          end
                          if r15
                            r12 = r15
                          else
                            @index = i12
                            r12 = nil
                          end
                        end
                      end
                      s1 << r12
                      if r12
                        r16 = _nt_space
                        s1 << r16
                        if r16
                          i17, s17 = index, []
                          r18 = _nt_number
                          s17 << r18
                          if r18
                            if has_terminal?("K", false, index)
                              r19 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure("K")
                              r19 = nil
                            end
                            s17 << r19
                          end
                          if s17.last
                            r17 = instantiate_node(SyntaxNode,input, i17...index, s17)
                            r17.extend(Line1)
                          else
                            @index = i17
                            r17 = nil
                          end
                          s1 << r17
                          if r17
                            r20 = _nt_space
                            s1 << r20
                            if r20
                              i21, s21 = index, []
                              r22 = _nt_number
                              s21 << r22
                              if r22
                                if has_terminal?("K", false, index)
                                  r23 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                  @index += 1
                                else
                                  terminal_parse_failure("K")
                                  r23 = nil
                                end
                                s21 << r23
                              end
                              if s21.last
                                r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
                                r21.extend(Line2)
                              else
                                @index = i21
                                r21 = nil
                              end
                              s1 << r21
                              if r21
                                r24 = _nt_space
                                s1 << r24
                                if r24
                                  i25 = index
                                  if has_terminal?("fg", false, index)
                                    r26 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                    @index += 2
                                  else
                                    terminal_parse_failure("fg")
                                    r26 = nil
                                  end
                                  if r26
                                    r25 = r26
                                  else
                                    if has_terminal?("bg", false, index)
                                      r27 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                      @index += 2
                                    else
                                      terminal_parse_failure("bg")
                                      r27 = nil
                                    end
                                    if r27
                                      r25 = r27
                                    else
                                      @index = i25
                                      r25 = nil
                                    end
                                  end
                                  s1 << r25
                                  if r25
                                    r28 = _nt_space
                                    s1 << r28
                                    if r28
                                      r29 = _nt_word
                                      s1 << r29
                                      if r29
                                        r30 = _nt_space
                                        s1 << r30
                                        if r30
                                          r31 = _nt_word
                                          s1 << r31
                                          if r31
                                            r32 = _nt_space
                                            s1 << r32
                                            if r32
                                              s33, i33 = [], index
                                              loop do
                                                i34, s34 = index, []
                                                i35 = index
                                                if has_terminal?("\n", false, index)
                                                  r36 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                  @index += 1
                                                else
                                                  terminal_parse_failure("\n")
                                                  r36 = nil
                                                end
                                                if r36
                                                  r35 = nil
                                                else
                                                  @index = i35
                                                  r35 = instantiate_node(SyntaxNode,input, index...index)
                                                end
                                                s34 << r35
                                                if r35
                                                  if index < input_length
                                                    r37 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                    @index += 1
                                                  else
                                                    terminal_parse_failure("any character")
                                                    r37 = nil
                                                  end
                                                  s34 << r37
                                                end
                                                if s34.last
                                                  r34 = instantiate_node(SyntaxNode,input, i34...index, s34)
                                                  r34.extend(Line3)
                                                else
                                                  @index = i34
                                                  r34 = nil
                                                end
                                                if r34
                                                  s33 << r34
                                                else
                                                  break
                                                end
                                              end
                                              r33 = instantiate_node(SyntaxNode,input, i33...index, s33)
                                              s1 << r33
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(Line4)
      else
        @index = i1
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:line][start_index] = r0

    r0
  end

  module Space0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      if has_terminal?("\\\n", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure("\\\n")
        r2 = nil
      end
      if r2
        r1 = r2
      else
        if has_terminal?('\G[ \\t]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          r1 = r3
        else
          if has_terminal?('\G[ \\s]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          if r4
            r1 = r4
          else
            @index = i1
            r1 = nil
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    r0.extend(Space0)

    node_cache[:space][start_index] = r0

    r0
  end

  module White0
  end

  def _nt_white
    start_index = index
    if node_cache[:white].has_key?(index)
      cached = node_cache[:white][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[ \\t\\n\\r\\f]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    r0.extend(White0)

    node_cache[:white][start_index] = r0

    r0
  end

  module Word0
  end

  def _nt_word
    start_index = index
    if node_cache[:word].has_key?(index)
      cached = node_cache[:word][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[a-zA-Z_.,/0-9"\'#@\\-\\*:~\\+\\!]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Word0)
    end

    node_cache[:word][start_index] = r0

    r0
  end

  module Number0
  end

  def _nt_number
    start_index = index
    if node_cache[:number].has_key?(index)
      cached = node_cache[:number][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[0-9]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Number0)
    end

    node_cache[:number][start_index] = r0

    r0
  end

end

class TopParser < Treetop::Runtime::CompiledParser
  include Top
end

